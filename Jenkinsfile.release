pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
  namespace: jenkins-agents
spec:
  serviceAccountName: jenkins
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest
    env:
    - name: JENKINS_URL
      value: "https://jenkins.oortfy.com/"
    - name: JENKINS_AGENT_WORKDIR
      value: "/home/jenkins/agent"
  - name: golang
    image: golang:1.24
    command:
    - cat
    tty: true
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.11.0-debug
    imagePullPolicy: Always
    command:
    - /busybox/cat
    tty: true
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /kaniko/.docker
    resources:
      limits:
        memory: 2Gi
        cpu: 500m
      requests:
        memory: 512Mi
        cpu: 250m
  volumes:
  - name: jenkins-docker-cfg
    secret:
      secretName: regcred
      items:
        - key: .dockerconfigjson
          path: config.json
  - emptyDir:
      medium: ""
    name: "workspace-volume"
'''
            defaultContainer 'golang'
        }
    }

    parameters {
        string(name: 'VERSION', defaultValue: '', description: 'Release version (e.g., v1.0.0)')
        booleanParam(name: 'PUSH_DOCKER', defaultValue: true, description: 'Push Docker image to registry')
    }

    environment {
        REGISTRY = "fixyimage.azurecr.io"
        IMAGE_NAME = "oortfy/apigateway"
    }

    stages {
        stage('Setup') {
            steps {
                container('golang') {
                    // Install dependencies
                    sh '''
                    # Install GoReleaser
                    go install github.com/goreleaser/goreleaser@latest
                    
                    # Install required dependencies
                    go get -v github.com/golang-jwt/jwt/v4
                    go get -v gopkg.in/yaml.v3
                    go get -v github.com/ip2location/ip2location-go/v9
                    go get -v github.com/stretchr/testify
                    
                    # Download and verify all dependencies
                    go mod download
                    go mod verify
                    go mod tidy
                    '''
                }
            }
        }

        stage('Build Release') {
            steps {
                container('golang') {
                    script {
                        def version = params.VERSION ?: sh(script: 'git describe --tags --always', returnStdout: true).trim()
                        
                        // Create release artifacts
                        sh """
                        \$(go env GOPATH)/bin/goreleaser build --single-target --clean --skip-validate
                        """
                        
                        // Archive release artifacts
                        archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('kaniko') {
                    script {
                        def version = params.VERSION ?: sh(script: 'git describe --tags --always', returnStdout: true).trim()
                        
                        // Build and push Docker image using Kaniko
                        sh "/kaniko/executor --context=\$PWD --destination=${env.REGISTRY}/${env.IMAGE_NAME}:${version}"
                        
                        // Also tag as latest if a specific version is provided
                        if (params.VERSION) {
                            sh "/kaniko/executor --context=\$PWD --destination=${env.REGISTRY}/${env.IMAGE_NAME}:latest --cleanup"
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { return false } // Disable this stage as Kaniko handles pushing
            }
            steps {
                echo "Skipped - Kaniko handles the image push automatically"
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
} 