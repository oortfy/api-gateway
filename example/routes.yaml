routes:
  - path: "/scanjobmanager/*"
    upstream: "http://localhost:8001"
    methods: ["GET", "POST", "PUT", "DELETE"]
    protocol: HTTP
    load_balancing:
      method: "round_robin"
      health_check: true
      driver: static
      discoveries:
      endpoints:
        - "http://localhost:8001"
        - "http://localhost:8002"
      health_check_config:
        path: "/scanjobmanager/health"
        interval: 10
        timeout: 2

  - path: "/api/users/*"
    methods: ["GET", "POST", "PUT", "DELETE"]
    protocol: HTTP
    upstream: "http://user-service:8082"
    strip_prefix: true
    timeout: 30
    middlewares:
      require_auth: true
      circuit_breaker:
        enabled: true
        threshold: 5
        timeout: 30
        max_concurrent: 100
      rate_limit:
        requests: 100
        period: "minute"

  - path: "/api/products/*"
    methods: ["GET", "POST", "PUT", "DELETE"]
    protocol: HTTP
    upstream: "http://product-service:8083"
    strip_prefix: true
    timeout: 30
    middlewares:
      require_auth: true
      cache:
        enabled: true
        ttl: 300
        cache_authenticated: false
      header_transform:
        request:
          "X-Source": "api-gateway"
        response:
          "Cache-Control": "public, max-age=300"

  - path: "/api/orders/*"
    methods: ["GET", "POST", "PUT", "DELETE"]
    protocol: HTTP
    upstream: "http://order-service:8084"
    strip_prefix: true
    timeout: 30
    middlewares:
      require_auth: true
      circuit_breaker:
        enabled: true
        threshold: 3
        timeout: 60
        max_concurrent: 50
      retry_policy:
        enabled: true
        attempts: 3
        per_try_timeout: 5
        retry_on: ["connection_error", "server_error"]

  - path: "/api/public/*"
    methods: ["GET"]
    protocol: HTTP
    upstream: "http://public-service:8085"
    strip_prefix: true
    timeout: 30
    middlewares:
      require_auth: false
      cache:
        enabled: true
        ttl: 600
        cache_authenticated: false
      rate_limit:
        requests: 500
        period: "minute"

  - path: "/api/search/*"
    methods: ["GET"]
    protocol: HTTP
    upstream: "http://search-service:8087"
    strip_prefix: true
    timeout: 45
    middlewares:
      require_auth: false
      rate_limit:
        requests: 50
        period: "minute"
      cache:
        enabled: true
        ttl: 120
        cache_authenticated: false

  - path: "/api/legacy/*"
    methods: ["GET", "POST"]
    protocol: HTTP
    upstream: "http://legacy-service:8088"
    strip_prefix: true
    timeout: 60
    middlewares:
      require_auth: true
      url_rewrite:
        patterns:
          - match: "/api/legacy/users/(.*)"
            replacement: "/internal/users/$1"
      header_transform:
        request:
          "X-Legacy-System": "true"
        response:
          "X-Powered-By": ""
        remove: ["Server"]

  - path: "/api/metrics/*"
    methods: ["GET"]
    protocol: HTTP
    upstream: "http://metrics-service:8089"
    strip_prefix: true
    timeout: 15
    middlewares:
      require_auth: true
      rate_limit:
        requests: 50
        period: "minute"

  - path: "/scanjobmanager/*"
    methods: ["GET", "POST", "PUT", "DELETE"]
    protocol: HTTP
    upstream: "http://localhost:8001"
    strip_prefix: false
    timeout: 30
    middlewares:
      require_auth: true
      rate_limit:
        requests: 2
        period: "minute"
      circuit_breaker:
        enabled: true
        threshold: 5
        timeout: 30
        max_concurrent: 50

  - path: "/ws/*"
    upstream: "http://websocket-service:8086"
    protocol: SOCKET
    strip_prefix: false
    timeout: 60
    websocket:
      enabled: true
      path: "/ws"
      upstream_path: "/socket"
    middlewares:
      require_auth: true
      circuit_breaker:
        enabled: true
        threshold: 3
        timeout: 60
        max_concurrent: 200
      
  - path: "/health"
    methods: ["GET"]
    upstream: "http://localhost:8080"
    protocol: HTTP
    strip_prefix: false
    timeout: 5
    middlewares:
      require_auth: false
      cache:
        enabled: false

  - path: "/api/search/*"
    upstream: "http://localhost:8087"
    methods: ["GET", "POST", "PUT", "DELETE"]
    protocol: HTTP
    load_balancing:
      method: "round_robin"
      health_check: true
      driver: etcd
      discoveries:
        name: "searchServers"
        prefix: "services"
        fail_limit: 3
      endpoints:
      health_check_config:
        path: "/api/search/health"
        interval: 10
        timeout: 2

  # HTTP to HTTP route example
  - path: "/api/users"
    protocol: "HTTP"
    upstream: "http://users-service:8080"
    methods: ["GET", "POST", "PUT", "DELETE"]
    strip_prefix: true
    timeout: 30
    compression: true
    middlewares:
      require_auth: true
      rate_limit:
        requests: 100
        period: "1m"
      circuit_breaker:
        enabled: true
        threshold: 5
        timeout: 30
      cache:
        enabled: true
        ttl: 300
        cache_authenticated: false
      header_transform:
        request:
          X-Service: "users"
        response:
          X-Response-Time: "${response_time}"
      url_rewrite:
        patterns:
          - match: "/api/users"
            replacement: "/v1/users"

  # gRPC to gRPC route example
  - path: "api_gateway.shop.user.v1.User/*"
    protocol: "GRPC"
    endpoints_protocol: "GRPC"
    rpc_server: "/api/user"
    upstream: "grpc://user-service:50051"
    timeout: 30
    compression: true
    middlewares:
      require_auth: true
      rate_limit:
        requests: 100
        period: "1m"
      circuit_breaker:
        enabled: true
        threshold: 5
        timeout: 30

  # HTTP to gRPC route example
  - path: "/api/products"
    protocol: "HTTP"
    endpoints_protocol: "GRPC"
    rpc_server: "/api/product"
    upstream: "grpc://product-service:50051"
    methods: ["GET", "POST"]
    timeout: 30
    compression: true
    middlewares:
      require_auth: true
      header_transform:
        request:
          X-Service: "products"
        response:
          X-Response-Time: "${response_time}"

  # gRPC to HTTP route example
  - path: "api_gateway.shop.order.v1.Order/*"
    protocol: "GRPC"
    endpoints_protocol: "HTTP"
    rpc_server: "/api/order"
    upstream: "http://order-service:8080"
    timeout: 30
    compression: true
    middlewares:
      require_auth: true
      circuit_breaker:
        enabled: true
        threshold: 5
        timeout: 30