openapi: 3.0.3
info:
  title: API Gateway
  description: |
    A high-performance, feature-rich API Gateway built in Go, designed for microservices architectures 
    with advanced traffic management, security, and observability features.
    
    ## Features
    
    * **Traffic Management**: Rate limiting, circuit breakers, request retries, load balancing, and response caching
    * **Security**: API key authentication, JWT token validation, CORS configuration, TLS support
    * **Observability**: Prometheus metrics, distributed tracing (Jaeger), structured JSON logging, health checks
    * **Request Processing**: URL rewriting, header transformation, query parameter manipulation, WebSocket support
    
    The API Gateway properly detects and forwards the client's real IP address to backend services,
    providing geolocation information using IP2Location.
  contact:
    email: support@example.com
  license:
    name: Mozilla Public License 2.0 with Commons Clause
    url: https://www.mozilla.org/en-US/MPL/2.0/
  version: 1.0.0
externalDocs:
  description: API Gateway Documentation
  url: https://github.com/yourusername/api-gateway
servers:
  - url: http://localhost:8080
    description: Local Development
  - url: https://api.example.com
    description: Production Server
tags:
  - name: Health
    description: Health check endpoints
  - name: Metrics
    description: Metrics and monitoring endpoints
  - name: Diagnostics
    description: Diagnostic tools and endpoints
  - name: Proxy
    description: Proxy endpoints to backend services
  - name: WebSockets
    description: WebSocket proxy endpoints

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the current health status of the API Gateway
      operationId: getHealth
      responses:
        '200':
          description: API Gateway is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "up"
                  time:
                    type: string
                    format: date-time
                    example: "2024-04-11T10:30:45.123Z"
        '503':
          description: API Gateway is unhealthy
  
  /metrics:
    get:
      tags:
        - Metrics
      summary: Prometheus metrics endpoint
      description: Returns Prometheus-formatted metrics about the API Gateway
      operationId: getMetrics
      responses:
        '200':
          description: Metrics successfully retrieved
          content:
            text/plain:
              schema:
                type: string
  
  /test-ip:
    get:
      tags:
        - Diagnostics
      summary: IP detection test endpoint
      description: |
        Tests the IP detection and geolocation capabilities.
        You can test with simulated IP addresses by setting the X-Real-IP header.
      operationId: testIp
      parameters:
        - name: X-Real-IP
          in: header
          description: Simulated client IP address
          required: false
          schema:
            type: string
        - name: token
          in: query
          description: JWT token for testing query parameter authentication
          required: false
          schema:
            type: string
        - name: api_key
          in: query
          description: API key for testing query parameter authentication
          required: false
          schema:
            type: string
      responses:
        '200':
          description: IP detection test results
          content:
            application/json:
              schema:
                type: object
                properties:
                  client_ip:
                    type: string
                    example: "8.8.8.8"
                  remote_addr:
                    type: string
                    example: "172.17.0.1:51234"
                  country:
                    type: string
                    example: "US"
                  headers:
                    type: object
                    properties:
                      x-forwarded-for:
                        type: string
                        example: "8.8.8.8"
                      x-real-ip:
                        type: string
                        example: "8.8.8.8"
                      authorization:
                        type: string
                        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      x-api-key:
                        type: string
                        example: "api-key-value"
                  query_parameters:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      api_key:
                        type: string
                        example: "api-key-value"
                  time:
                    type: string
                    format: date-time
                    example: "2024-04-11T10:30:45.123Z"
                  auth_method:
                    type: string
                    enum: [jwt, api_key, none]
                    example: "jwt"

  # Generic proxy path examples
  /api/v1/{path}:
    get:
      tags:
        - Proxy
      summary: Generic proxy endpoint (GET)
      description: |
        Generic proxy endpoint that forwards the request to a configured upstream service.
        The actual behavior depends on the routes configuration.
      operationId: proxyGet
      parameters:
        - name: path
          in: path
          description: Path to be forwarded to the upstream service
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: JWT Bearer token for authentication
          required: false
          schema:
            type: string
        - name: x-api-key
          in: header
          description: API key for authentication
          required: false
          schema:
            type: string
        - name: token
          in: query
          description: JWT token (alternative to Authorization header)
          required: false
          schema:
            type: string
        - name: api_key
          in: query
          description: API key (alternative to x-api-key header)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response from upstream service
        '401':
          description: Unauthorized - missing or invalid authentication
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Not Found - no matching route or upstream service returned 404
        '429':
          description: Too Many Requests - rate limit exceeded
        '500':
          description: Internal Server Error
        '502':
          description: Bad Gateway - upstream service returned an invalid response
        '503':
          description: Service Unavailable - circuit breaker is open or upstream service is down
        '504':
          description: Gateway Timeout - upstream service took too long to respond
    post:
      tags:
        - Proxy
      summary: Generic proxy endpoint (POST)
      description: |
        Generic proxy endpoint that forwards the request to a configured upstream service.
        The actual behavior depends on the routes configuration.
      operationId: proxyPost
      parameters:
        - name: path
          in: path
          description: Path to be forwarded to the upstream service
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: JWT Bearer token for authentication
          required: false
          schema:
            type: string
        - name: x-api-key
          in: header
          description: API key for authentication
          required: false
          schema:
            type: string
        - name: token
          in: query
          description: JWT token (alternative to Authorization header)
          required: false
          schema:
            type: string
        - name: api_key
          in: query
          description: API key (alternative to x-api-key header)
          required: false
          schema:
            type: string
      requestBody:
        description: Request body to be forwarded to the upstream service
        content:
          application/json:
            schema:
              type: object
          application/xml:
            schema:
              type: object
          multipart/form-data:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        '200':
          description: Successful response from upstream service
        '401':
          description: Unauthorized - missing or invalid authentication
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Not Found - no matching route or upstream service returned 404
        '429':
          description: Too Many Requests - rate limit exceeded
        '500':
          description: Internal Server Error
        '502':
          description: Bad Gateway - upstream service returned an invalid response
        '503':
          description: Service Unavailable - circuit breaker is open or upstream service is down
        '504':
          description: Gateway Timeout - upstream service took too long to respond

  # WebSocket example
  /ws/{path}:
    get:
      tags:
        - WebSockets
      summary: WebSocket proxy endpoint
      description: |
        WebSocket proxy endpoint that upgrades the connection and forwards it to a configured upstream service.
        The actual behavior depends on the routes configuration.
      operationId: proxyWebSocket
      parameters:
        - name: path
          in: path
          description: Path to be forwarded to the upstream service
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: JWT Bearer token for authentication
          required: false
          schema:
            type: string
        - name: x-api-key
          in: header
          description: API key for authentication
          required: false
          schema:
            type: string
        - name: token
          in: query
          description: JWT token (alternative to Authorization header)
          required: false
          schema:
            type: string
        - name: api_key
          in: query
          description: API key (alternative to x-api-key header)
          required: false
          schema:
            type: string
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '400':
          description: Bad Request - WebSocket upgrade failed
        '401':
          description: Unauthorized - missing or invalid authentication
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Not Found - no matching route
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable - upstream service is down

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API Key authentication
    QueryTokenAuth:
      type: apiKey
      in: query
      name: token
      description: JWT token in query parameter (fallback authentication)
    QueryApiKeyAuth:
      type: apiKey
      in: query
      name: api_key
      description: API key in query parameter (fallback authentication)
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Unauthorized: invalid token"
        status:
          type: integer
          format: int32
          example: 401 